{
  "name": "pyeit",
  "tagline": "PyEIT: A Python implementation of Electrical Impedance Tomography",
  "body": "# ![pyeit](https://raw.githubusercontent.com/liubenyuan/pyEIT/master/figs/logo.png)\r\n\r\n*A python-based, open-source package for Electrical Impedance Tomography (EIT)*\r\n\r\n**Principles: modularity, minimalism, easy extensibility!**\r\n\r\n## 1. Introduction\r\n\r\n### 1.1 Dependencies\r\n\r\n| Packages |  Optional | Note |\r\n| ---- | ---- | ---- |\r\n| **numpy** | | tested with `numpy-1.10.4`, `numpy-1.11.rc1` |\r\n| **scipy** | | tested with `scipy-0.17.0` |\r\n| **matplotlib** | | tested with `matplotlib-1.5.1` |\r\n| **vispy** |  *Optional* | tested with `vispy-git` |\r\n| **pandas** | *Optional* | tested with `pandas-0.17.1` |\r\n| **xarray** | *Optional* | for long term data analysis |\r\n| **distmesh** | *Optional* | it currently has a build-in distmesh module (supports 2D and 3D!) |\r\n| **tetgen** | *Optional* | generate 3D meshes |\r\n\r\n**Note 1, Why vispy ?** `pyEIT` uses `vispy` for visualizing (optional) 3D meshes (tetrahedron). `vispy` has minimal system dependencies, all you need is a decent graphical card with `OpenGL` support. It supports fast rendering, which I think is more superior to `vtk` or `mayavi` especially for python 3 support. Please go to the website [vispy.org](http://vispy.org/) or github repository [vispy.github](https://github.com/vispy/vispy) for more details.\r\n\r\n**Note 2, How to contribute ?** The interested user can contribute **(create a PR! any type of improvement is welcome)** forward simulation, inverse solving algorithms as well as their models at current stage. We will setup a wiki page dedicated to this topic.\r\n\r\n**Note 3, Fast setup.** [Anaconda from continuum](https://www.continuum.io/downloads) is highly recommended for this package. PyEIT is purely python and has minimal dependencies. It can be run directly on an existing anaconda environment (`python-2.7` and `python-3.5`).\r\n\r\n### 1.2 Features\r\n\r\n - 2D forward and inverse computing of EIT\r\n - Reconstruction algorithms : Gauss-Newton solver (JAC), Back-projection (BP), 2D GREIT\r\n - 2D/3D visualization!\r\n - Add support for 3D forward and inverse computing\r\n - 3D mesh generation and visualization\r\n - Generate complex shape using distmesh (TODO)\r\n - More algorithms and data pre-processing modules (TODO)\r\n - Complete electrode model (TODO)\r\n\r\n## 2. Installation\r\n\r\n`pyEIT` is purely python based (in current version), so it can be installed and run without any difficulty.\r\n\r\n### 2.1 Install global\r\n\r\n```\r\n$ python setup.py build\r\n$ python setup.py install\r\n```\r\n\r\n### 2.2 set PYTHONPATH (recommended)\r\n\r\n```\r\nexport PYTHONPATH=/path/to/pyEIT\r\n```\r\n\r\nIn windows, you may set `PYTHONPATH` as a system wide environment. If you are using `spyder-IDE`, or `pyCharm`, you may also set `PYTHONPATH` in the IDE, which is more convenient. Please refer to a specific tool for detailed information.\r\n\r\n## 3. Run the demo\r\n\r\nEnter the demo folder, pick one demo, and run !\r\n\r\n### 3.1 (2D) forward and inverse computing\r\n\r\n**Using** `demo/demo_dynamic_bp.py`\r\n\r\n![demo_bp](https://raw.githubusercontent.com/liubenyuan/pyEIT/master/figs/demo_bp.png)\r\n\r\n**Using** `demo/demo_dynamic_greit.py`\r\n\r\n![demo_greit](https://raw.githubusercontent.com/liubenyuan/pyEIT/master/figs/demo_greit.png)\r\n\r\n**Using** `demo/demo_dynamic_jac.py`\r\n\r\n![demo_greit](https://raw.githubusercontent.com/liubenyuan/pyEIT/master/figs/demo_jac.png)\r\n\r\n**Using** `demo/demo_static_jac.py`\r\n\r\n![demo_static](https://raw.githubusercontent.com/liubenyuan/pyEIT/master/figs/demo_static.png)\r\n\r\n### 3.2 (3D) forward and inverse computing\r\n\r\n**Using** `demo/demo_forward3d.py`\r\n\r\n**Using** `demo/demo_dynamic_jac3d.py`\r\n\r\n**Notes:**\r\n\r\n - The 3D visualization can be adjusted using mouse wheels interactively. Seeking a perfect visualization mode, transparency or opaque, is in fact an individual taste. User can also use `mayavi` and `vtk` for visualization purpose.\r\n - Solving the inverse problem of 3D EIT, requires the electrodes to be placed at multiple altitude (z-axis) in order to have (better) z-resolution. This should be done carefully, as adding extra z-belt introduces more excitation patterns, which in turn adds more computational loads.\r\n\r\n## 4. Contribute to pyEIT !\r\n\r\nGive a **star**, **fork** and commit a pull request **(PR)** !\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}